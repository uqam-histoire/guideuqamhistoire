name: Build & publish undergraduate guide

on:
  push:
    branches: [ main ]
    paths:
      - "Guide_1er_cycle_2025_VF.docx"
      - "assets/**"
      - ".github/workflows/build-guide.yml"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install tools + Times New Roman for faithful PDF
      - name: Install converters & fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice pandoc fontconfig software-properties-common
          sudo add-apt-repository multiverse -y
          sudo apt-get update
          echo "ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true" | sudo debconf-set-selections
          sudo apt-get install -y ttf-mscorefonts-installer
          sudo fc-cache -f -v
          fc-list | grep -i "Times New Roman" || true

      # Copy only what we publish (CSS + images)
      - name: Prepare dist and copy assets
        run: |
          set -e
          mkdir -p dist/assets/images
          # CSS
          cp assets/*.css dist/assets/ 2>/dev/null || true
          # Images (annex-*.png under assets/images/)
          cp assets/images/* dist/assets/images/ 2>/dev/null || true
          echo "Published assets:"; ls -la dist/assets || true
          echo "Published images:"; ls -la dist/assets/images || true

      # Build date for cache-busting in the template
      - name: Set build date
        run: echo "BUILD_DATE=$(date -u +%Y-%m-%d)" >> $GITHUB_ENV

      # DOCX → PDF (desktop), embed fonts & bookmarks
      - name: Convert DOCX to PDF
        run: |
          libreoffice --headless \
            --convert-to "pdf:writer_pdf_Export:EmbedStandardFonts=true;ExportBookmarks=true;SelectPdfVersion=1" \
            "Guide_1er_cycle_2025_VF.docx" \
            --outdir dist

      # (Optional) Set PDF metadata (Title/Author/Subject)
      - name: Install exiftool
        run: sudo apt-get update && sudo apt-get install -y libimage-exiftool-perl
      - name: Set PDF metadata
        env:
          PDF_TITLE: "Guide du programme d'histoire – UQAM"
          PDF_AUTHOR: "Département d’histoire, UQAM"
          PDF_SUBJECT: "Guide du 1er cycle (B.A., majeure, mineures, certificats)"
        run: |
          exiftool -overwrite_original \
            -Title="$PDF_TITLE" \
            -Author="$PDF_AUTHOR" \
            -Subject="$PDF_SUBJECT" \
            -Keywords="UQAM, Histoire, Premier cycle, Guide" \
            dist/Guide_1er_cycle_2025_VF.pdf
          exiftool -Title -Author -Subject dist/Guide_1er_cycle_2025_VF.pdf || true

      # DOCX → HTML (mobile) using your template + Lua filter
      - name: Convert DOCX to HTML (Pandoc)
        run: |
          pandoc "Guide_1er_cycle_2025_VF.docx" \
                 -s -t html5 \
                 --section-divs \
                 --lua-filter=./assets/section-tagger.lua \
                 --template=assets/pandoc.html5 \
                 --metadata title="Guide à l’intention des étudiants et des étudiantes de premier cycle en histoire et en archivistique" \
                 --metadata lang=fr \
                 --metadata date="${BUILD_DATE}" \
                 --toc --toc-depth=3 --number-sections \
                 --css=assets/uqam-guide.css \
                 -o dist/index.html

      # Replace wrappers if present, then try section-ID anchored placement, then fallback injects
      - name: Ensure Annex figures (robust placement)
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"

          # --- 1) Replace wrapper blocks if present (non-fatal if absent) ---
          perl -0777 -i -pe 's|<div[^>]*class="[^"]*\btitle-mock\b"[^>]*>.*?</div>|<figure class="annex-figure"><img src="assets/images/annex-title.png" alt="Modèle de page titre (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>|gs' "$html" || true
          perl -0777 -i -pe 's|<div[^>]*class="[^"]*\btoc-mock\b"[^>]*>.*?</div>|<figure class="annex-figure"><img src="assets/images/annex-toc.png" alt="Modèle de table des matières (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>|gs' "$html" || true
          perl -0777 -i -pe 's|<div[^>]*class="[^"]*\bnotes-mock\b"[^>]*>.*?</div>|<figure class="annex-figure"><img src="assets/images/annex-notes.png" alt="Exemple de texte avec appels de notes et citations (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>|gs' "$html" || true

          # --- 2) Place figures inside their own sections by SECTION ID, keeping heading and removing mock text ---
          # (Pandoc makes ASCII ids: accents stripped, lowercase, spaces→hyphens)
          place_in_section() {
            local sec_id="$1" img="$2" alt="$3"
            # Replace everything after the section's heading up to </section> with the figure
            perl -0777 -i -pe "s{(<section[^>]*id=\\\"${sec_id}\\\"[^>]*>\\s*<h[1-6][^>]*>.*?</h[1-6]>)(?s).*?(</section>)}{\\1\\n<figure class=\\\"annex-figure\\\"><img src=\\\"${img}\\\" alt=\\\"${alt}\\\"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>\\n\\2}i" \"$html\" || true
          }
          place_in_section "modele-de-page-titre" "assets/images/annex-title.png" "Modèle de page titre (image)"
          place_in_section "modele-de-table-des-matieres" "assets/images/annex-toc.png" "Modèle de table des matières (image)"
          place_in_section "exemple-de-texte-avec-appels-de-notes-et-citations" "assets/images/annex-notes.png" "Exemple de texte avec appels de notes et citations (image)"

          # --- 3) Final fallback: if any figure still missing, inject at start of the Annexes section in the correct order ---
          ensure_at_top() {
            local img="$1" alt="$2"
            if ! grep -q "$img" "$html"; then
              perl -0777 -i -pe "s|(<section[^>]*id=\\\"annexes\\\"[^>]*>)|\\1\\n<figure class=\\\"annex-figure\\\"><img src=\\\"${img}\\\" alt=\\\"${alt}\\\"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>\\n|s" \"$html\"
            fi
          }
          ensure_at_top "assets/images/annex-title.png" "Modèle de page titre (image)"
          ensure_at_top "assets/images/annex-toc.png"   "Modèle de table des matières (image)"
          ensure_at_top "assets/images/annex-notes.png" "Exemple de texte avec appels de notes et citations (image)"

          echo "Annex images referenced (should list title/toc/notes):"
          grep -n 'assets/images/annex-' "$html" || true

      - name: Ensure TOC figure sits between Title and Notes
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"

          # The figure HTML we want to insert
          TOC=$(cat <<'HTML'
            <figure class="annex-figure"><img src="assets/images/annex-toc.png" alt="Modèle de table des matières (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>
            HTML
            )

          # Only act if TOC isn't present yet
          if ! grep -q 'assets/images/annex-toc.png' "$html"; then
            # Try the ideal placement: between Title and Notes figures
            perl -0777 -i -pe "s|( <figure[^>]*>.*?assets/images/annex-title\\.png.*?</figure> )(.*?)( <figure[^>]*>.*?assets/images/annex-notes\\.png.*?</figure> )|\\1\\n${TOC}\\n\\3|s" "$html" || true

            # If still missing, put it immediately AFTER the Title figure
            if ! grep -q 'assets/images/annex-toc.png' "$html"; then
              perl -0777 -i -pe "s|( <figure[^>]*>.*?assets/images/annex-title\\.png.*?</figure> )|\\1\\n${TOC}|s" "$html" || true
            fi

            # If still missing, inject at the start of the Annexes section
            if ! grep -q 'assets/images/annex-toc.png' "$html"; then
              perl -0777 -i -pe "s|(<section[^>]*id=\\\"annexes\\\"[^>]*>)|\\1\\n${TOC}\\n|s" "$html" || true
            fi
          fi

          echo "Annex images now (should list title, toc, notes):"
          grep -n 'assets/images/annex-' "$html" || true

      - name: Ensure TOC figure exists and sits between Title and Notes
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"
          TOC='<figure class="annex-figure"><img src="assets/images/annex-toc.png" alt="Modèle de table des matières (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>'

          # 1) If TOC is missing, insert it in the best spot
          if ! grep -q 'assets/images/annex-toc.png' "$html"; then
            if grep -q 'assets/images/annex-notes.png' "$html"; then
              # Insert TOC immediately BEFORE the Notes figure
              perl -0777 -i -pe "s|( <figure[^>]*>.*?assets/images/annex-notes\\.png.*?</figure> )|${TOC}\n\\1|s" "$html"
            elif grep -q 'assets/images/annex-title.png' "$html"; then
              # Else insert TOC immediately AFTER the Title figure
              perl -0777 -i -pe "s|( <figure[^>]*>.*?assets/images/annex-title\\.png.*?</figure> )|\\1\n${TOC}|s" "$html"
            else
              # Last resort: put TOC at the start of the Annexes section
              perl -0777 -i -pe "s|(<section[^>]*id=\"annexes\"[^>]*>)|\\1\n${TOC}\n|s" "$html"
            fi
          fi

          # 2) If TOC exists but is AFTER Notes, move it before Notes (ensure Title, TOC, Notes order)
          if grep -q 'assets/images/annex-toc.png' "$html" && grep -q 'assets/images/annex-notes.png' "$html"; then
            # If the first occurrence of Notes comes before any TOC, move the first TOC to before Notes
            if awk 'BEGIN{t=0;n=0} /annex-toc.png/{t=NR} /annex-notes.png/{n=NR; exit} END{exit !(n>0 && (t==0 || t>n))}' "$html"; then
              # Remove the first TOC figure and reinsert before the first Notes figure
              perl -0777 -i -pe 'my $m; s|( <figure[^>]*>.*?assets/images/annex-toc\.png.*?</figure> )|($m= $1), ""|es' "$html"
              [ -n "${m-}" ] && perl -0777 -i -pe 's|( <figure[^>]*>.*?assets/images/annex-notes\.png.*?</figure> )|'"$m"'\n$1|s' "$html"
            fi
          fi

          echo "Annex images now:"
          grep -n 'assets/images/annex-' "$html" || true

      - name: Final TOC anchoring (insert after its label if still missing)
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"
          # Only act if the TOC image isn't there yet
          if ! grep -q 'assets/images/annex-toc.png' "$html"; then
            # Insert the figure immediately after the line "Modèle de table des matières"
            perl -0777 -i -pe 's{(<(p|h[1-6]|li)[^>]*>\s*Mod(?:[èe]le)?\s+de\s+table\s+des\s+mati(?:[èe]res).*?</\2>)}{$1\n<figure class="annex-figure"><img src="assets/images/annex-toc.png" alt="Modèle de table des matières (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>}i' "$html"
          fi
          echo "TOC figure present?"; grep -n 'assets/images/annex-toc.png' "$html" || true

      # Publish to GitHub Pages (gh-pages branch)
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: dist
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # If you later add a custom domain, uncomment:
          # cname: guide.histoire.uqam.ca
