name: Build & publish undergraduate guide

on:
  push:
    branches: [ main ]
    paths:
      - "Guide_1er_cycle_2025_VF.docx"
      - "assets/**"
      - ".github/workflows/build-guide.yml"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Tools + Times New Roman for faithful PDF
      - name: Install converters & fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice pandoc fontconfig software-properties-common
          sudo add-apt-repository multiverse -y
          sudo apt-get update
          echo "ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true" | sudo debconf-set-selections
          sudo apt-get install -y ttf-mscorefonts-installer
          sudo fc-cache -f -v
          fc-list | grep -i "Times New Roman" || true

      # Copy only what we publish (CSS + images)
      - name: Prepare dist and copy assets
        run: |
          set -e
          mkdir -p dist/assets/images
          cp assets/*.css dist/assets/ 2>/dev/null || true
          cp assets/images/* dist/assets/images/ 2>/dev/null || true
          echo "Published assets:"; ls -la dist/assets || true
          echo "Published images:"; ls -la dist/assets/images || true

      # Build date for footer
      - name: Set build date
        run: echo "BUILD_DATE=$(date -u +%Y-%m-%d)" >> $GITHUB_ENV

      # DOCX → PDF (desktop), embed fonts & bookmarks
      - name: Convert DOCX to PDF
        run: |
          libreoffice --headless \
            --convert-to "pdf:writer_pdf_Export:EmbedStandardFonts=true;ExportBookmarks=true;SelectPdfVersion=1" \
            "Guide_1er_cycle_2025_VF.docx" \
            --outdir dist

      # Set PDF metadata (Title/Author/Subject)
      - name: Install exiftool
        run: sudo apt-get update && sudo apt-get install -y libimage-exiftool-perl
      - name: Set PDF metadata
        env:
          PDF_TITLE: "Guide du programme d'histoire – UQAM"
          PDF_AUTHOR: "Département d’histoire, UQAM"
          PDF_SUBJECT: "Guide du 1er cycle (B.A., majeure, mineures, certificats)"
        run: |
          exiftool -overwrite_original \
            -Title="$PDF_TITLE" \
            -Author="$PDF_AUTHOR" \
            -Subject="$PDF_SUBJECT" \
            -Keywords="UQAM, Histoire, Premier cycle, Guide" \
            dist/Guide_1er_cycle_2025_VF.pdf
          exiftool -Title -Author -Subject dist/Guide_1er_cycle_2025_VF.pdf || true

      # DOCX → HTML (mobile) using template + Lua filter
      - name: Convert DOCX to HTML (Pandoc)
        run: |
          pandoc "Guide_1er_cycle_2025_VF.docx" \
                 -s -t html5 \
                 --section-divs \
                 --lua-filter=./assets/section-tagger.lua \
                 --template=assets/pandoc.html5 \
                 --metadata title="Guide à l’intention des étudiants et des étudiantes de premier cycle en histoire et en archivistique" \
                 --metadata lang=fr \
                 --metadata date="${BUILD_DATE}" \
                 --toc --toc-depth=3 --number-sections \
                 --css=assets/uqam-guide.css \
                 -o dist/index.html

      # Normalize Annexes: remove any old annex figures, then anchor each image under its section and snip text
      - name: Normalize Annexes (order + prune text)
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"

          # 0) Remove ANY previously-inserted annex figures (clean slate)
          perl -0777 -i -pe 's|<figure\s+class="annex-figure">.*?</figure>||gs' "$html"

          # Helper: replace the BODY of a section (after its <h*> heading) with a single figure.
          place_by_id() {
            local idpat="$1" img="$2" alt="$3"
            # Match a <section> whose id contains the tolerant slug.
            # Keep the opening tag + heading, replace everything up to </section>.
            perl -0777 -i -pe "s{
              (<section[^>]*\\bid=\\\"[^\\\"]*${idpat}[^\\\"]*\\\"[^>]*>\\s*<h[1-6][^>]*>.*?</h[1-6]>)
              (?s).*?
              (</section>)
            }{\\1\n<figure class=\\\"annex-figure\\\"><img src=\\\"${img}\\\" alt=\\\"${alt}\\\"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>\n\\2}igx" "$html" || true
          }

          # 1) Place in DOCUMENT order (Title → TOC → Notes)
          place_by_id "modele[- ]?de[- ]?page[- ]?titre" \
            "assets/images/annex-title.png" "Modèle de page titre (image)"

          place_by_id "modele[- ]?de[- ]?table[- ]?des[- ]?matieres" \
            "assets/images/annex-toc.png" "Modèle de table des matières (image)"

          place_by_id "exemple[- ]?de[- ]?texte[- ]?avec[- ]?appels[- ]?de[- ]?notes.*citations" \
            "assets/images/annex-notes.png" "Exemple de texte avec appels de notes et citations (image)"

          # 2) Last resort: if a figure is still missing (its <img> not found anywhere),
          #    inject it at the END of the Annexes section in the correct order.
          inject_at_end_if_missing() {
            local img="$1" alt="$2"
            if ! grep -q "$img" "$html"; then
              perl -0777 -i -pe "s|(</section>\\s*<!--\\s*end of annexes\\s*--> )|\\1|; s|(</section>)|<figure class=\\\"annex-figure\\\"><img src=\\\"${img}\\\" alt=\\\"${alt}\\\"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>\n\\1| if (/id=\\\"annexes\\\"/ .. /<\\/section>/)" "$html" || \
              perl -0777 -i -pe "s|(<section[^>]*id=\\\"annexes\\\"[^>]*>)(?s)(.*?)(</section>)|\\1\\2<figure class=\\\"annex-figure\\\"><img src=\\\"${img}\\\" alt=\\\"${alt}\\\"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>\\n\\3|s" "$html"
            fi
          }
          inject_at_end_if_missing "assets/images/annex-title.png" "Modèle de page titre (image)"
          inject_at_end_if_missing "assets/images/annex-toc.png"   "Modèle de table des matières (image)"
          inject_at_end_if_missing "assets/images/annex-notes.png" "Exemple de texte avec appels de notes et citations (image)"

          echo "Annex image refs now (expect title, toc, notes exactly once):"
          grep -n 'assets/images/annex-' "$html" || true

      # Publish to GitHub Pages (gh-pages branch)
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: dist
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # cname: guide.histoire.uqam.ca
