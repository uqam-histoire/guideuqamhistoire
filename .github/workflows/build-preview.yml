name: Build & publish undergraduate guide

on:
  push:
    branches: [ staging ]
    paths:
      - "Guide_1er_cycle_2025_VF.docx"
      - "assets/**"
      - ".github/workflows/build-preview.yml"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install converters & fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice pandoc fontconfig software-properties-common
          sudo add-apt-repository multiverse -y
          sudo apt-get update
          echo "ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true" | sudo debconf-set-selections
          sudo apt-get install -y ttf-mscorefonts-installer
          sudo fc-cache -f -v
          fc-list | grep -i "Times New Roman" || true

      - name: Prepare dist and copy assets
        run: |
          set -e
          mkdir -p dist/assets/images
          cp assets/*.css dist/assets/ 2>/dev/null || true
          cp assets/images/* dist/assets/images/ 2>/dev/null || true
          echo "Published assets:"; ls -la dist/assets || true
          echo "Published images:"; ls -la dist/assets/images || true

      - name: Set build date
        run: echo "BUILD_DATE=$(date -u +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Convert DOCX to PDF
        run: |
          libreoffice --headless \
            --convert-to "pdf:writer_pdf_Export:EmbedStandardFonts=true;ExportBookmarks=true;SelectPdfVersion=1;IsSkipEmptyPages=true" \
            "Guide_1er_cycle_2025_VF.docx" \
            --outdir dist


      - name: Install exiftool
        run: sudo apt-get update && sudo apt-get install -y libimage-exiftool-perl

      - name: Install qpdf & poppler-utils
        run: sudo apt-get update && sudo apt-get install -y qpdf poppler-utils

      - name: Set PDF metadata
        env:
          PDF_TITLE: "Guide du programme d'histoire – UQAM"
          PDF_AUTHOR: "Département d’histoire, UQAM"
          PDF_SUBJECT: "Guide du 1er cycle (B.A., majeure, mineures, certificats)"
        run: |
          exiftool -overwrite_original \
            -Title="$PDF_TITLE" -Author="$PDF_AUTHOR" -Subject="$PDF_SUBJECT" \
            -Keywords="UQAM, Histoire, Premier cycle, Guide" \
            dist/Guide_1er_cycle_2025_VF.pdf
          exiftool -Title -Author -Subject dist/Guide_1er_cycle_2025_VF.pdf || true

      - name: Drop blank page 3 if empty
        shell: bash
        run: |
          set -euo pipefail
          pdf="dist/Guide_1er_cycle_2025_VF.pdf"

          # Extract text from page 3; if there's none (only whitespace), drop page 3.
          if [ "$(pdftotext -f 3 -l 3 "$pdf" - | tr -d '\f\r\n[:space:]' | wc -c)" -eq 0 ]; then
            # Reassemble without page 3: 1-2,4..end
            qpdf --empty --pages "$pdf" 1-2,4-z -- "${pdf%.pdf}.tmp.pdf"
            mv -f "${pdf%.pdf}.tmp.pdf" "$pdf"
            echo "Removed blank page 3."
          else
            echo "Page 3 not empty; leaving PDF unchanged."
          fi

      - name: Convert DOCX to HTML (Pandoc)
        run: |
          pandoc "Guide_1er_cycle_2025_VF.docx" \
            -s -t html5 --section-divs \
            --lua-filter=./assets/section-tagger.lua \
            --template=assets/pandoc.html5 \
            --metadata title="Guide à l’intention des étudiants et des étudiantes de premier cycle en histoire et en archivistique" \
            --metadata lang=fr --metadata date="${BUILD_DATE}" \
            --toc --toc-depth=4 --number-sections \
            --css=assets/uqam-guide.css \
            -o dist/index.html

      - name: Hide Word-generated Table des matières (body)
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"

          # Normalize non-breaking spaces for reliable matching
          perl -0777 -i -pe 's/&nbsp;/ /g' "$html"

          # Remove the consecutive numbered <p> entries that appear right BEFORE the intro blockquote
          # (i.e., the Word ToC lines like "1 …", "1.2 …", "2.3.1 …")
          perl -0777 -i -pe 's@\s*(?:<p\b[^>]*>\s*(?:<[^>]+>\s*)*\d[\s\S]*?</p>\s*)+(?=\s*<blockquote\b)@@ig' "$html"

      - name: Rename Sommaire to “Table de Matières”
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"
          # Replace whatever is between <summary>…</summary> in the details.toc block
          perl -0777 -i -pe 's@(<details[^>]*\bclass="[^"]*\btoc\b[^"]*"[^>]*>\s*<summary[^>]*>)(.*?)(</summary>)@$1Table de Matières$3@is' "$html"

      - name: Inject preview-only ToC styles (links + indent)
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"
          # Inline CSS (safe & cache-proof for preview)
          perl -0777 -i -pe 's@</head>@<style>
            details.toc{ margin:.75rem 0 1.25rem; border:1px solid #e5e7eb; border-radius:.5rem; padding:.5rem .75rem; background:#fafbfc; }
            details.toc summary{ cursor:pointer; font-weight:600; color:var(--uqam-blue); }
            details.toc ul{ list-style:none; padding-left:.5rem; margin:0; }
            details.toc li{ margin:.15rem 0; }
            details.toc li li{ padding-left:1rem; }
            details.toc li li li{ padding-left:1.6rem; }
            details.toc li li li li{ padding-left:2.2rem; }
            details.toc a{ display:block; padding:.2rem .3rem; border-radius:.25rem; text-decoration:none; color:var(--uqam-blue); }
            details.toc a:hover{ background:#f6f8fa; text-decoration:underline; }
            </style></head>@i' "$html"

      # Step A: simple wrapper-to-figure replacement (fast path)
      - name: Swap Annex wrappers for figures (fast path)
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"
          perl -0777 -i -pe 's|<div[^>]*class="[^"]*\btitle-mock\b"[^>]*>.*?</div>|<figure class="annex-figure"><img src="assets/images/annex-title.png" alt="Modèle de page titre (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>|gs' "$html" || true
          perl -0777 -i -pe 's|<div[^>]*class="[^"]*\btoc-mock\b"[^>]*>.*?</div>|<figure class="annex-figure"><img src="assets/images/annex-toc.png" alt="Modèle de table des matières (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>|gs' "$html" || true
          perl -0777 -i -pe 's|<div[^>]*class="[^"]*\bnotes-mock\b"[^>]*>.*?</div>|<figure class="annex-figure"><img src="assets/images/annex-notes.png" alt="Exemple de texte avec appels de notes et citations (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>|gs' "$html" || true
          echo "After wrapper swap:"; grep -n 'assets/images/annex-' "$html" || true

      # Step B: if any still missing, anchor by the visible headings and prune text
      - name: Anchor by headings & prune text (fallback)
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"

          place_after_heading () {
            pat="$1"; img="$2"; alt="$3"
            # If image absent, insert right after heading and remove body until next heading or </section>
            grep -q "$img" "$html" && return 0
            perl -0777 -i -pe "s{
              (<(?:h[1-6]|p)[^>]*>.*?${pat}.*?</(?:h[1-6]|p)>)
              (?s).*?
              (?=(?:<h[1-6]|</section>))
            }{\\1\n<figure class=\\\"annex-figure\\\"><img src=\\\"${img}\\\" alt=\\\"${alt}\\\"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>\n}igx" "$html" || true
          }

          # Title → TOC → Notes (this order guarantees the final order)
          place_after_heading "Mod(?:[èe]le)?\\s+de\\s+page\\s+titre" \
            "assets/images/annex-title.png" "Modèle de page titre (image)"

          place_after_heading "Mod(?:[èe]le)?\\s+de\\s+table\\s+des\\s+mati(?:[èe]res)" \
            "assets/images/annex-toc.png" "Modèle de table des matières (image)"

          place_after_heading "Exemple\\s+de\\s+texte\\s+avec\\s+appels\\s+de\\s+notes.*citations" \
            "assets/images/annex-notes.png" "Exemple de texte avec appels de notes et citations (image)"

          echo "After heading fallback:"; grep -n 'assets/images/annex-' "$html" || true

# Final, authoritative placement: replace Annexes body with 3 figures in order
      - name: Replace Annexes content with ordered figures
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"
          perl -0777 -i -pe '
            s{
              (<section[^>]*id="annexes"[^>]*>\s*<h[1-6][^>]*>.*?</h[1-6]>)
              (?s).*?
              (</section>)
            }{
              $1
              \n<figure class="annex-figure"><img src="assets/images/annex-title.png" alt="Modèle de page titre (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>
              \n<figure class="annex-figure"><img src="assets/images/annex-toc.png"   alt="Modèle de table des matières (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>
              \n<figure class="annex-figure"><img src="assets/images/annex-notes.png" alt="Exemple de texte avec appels de notes et citations (image)"><figcaption>Voir le PDF pour la version imprimable</figcaption></figure>
              \n$2
            }isx;
          ' "$html"
          echo "Annex images now referenced (expect title, toc, notes):"
          grep -n 'assets/images/annex-' "$html" || true

      - name: Remove stray Annex III footnotes (4 & 5)
        shell: bash
        run: |
          set -euo pipefail
          html="dist/index.html"

          # 1) Remove by id if numbers are stable
          perl -0777 -i -pe 's#\s*<li id="fn4">.*?</li>\s*##gs' "$html" || true
          perl -0777 -i -pe 's#\s*<li id="fn5">.*?</li>\s*##gs' "$html" || true

          # 2) Also remove by content (in case numbering shifts later)
          perl -0777 -i -pe 's#\s*<li id="fn\d+">(?:(?:(?!</li>).)*?(Louis\s+Buade\s+de\s+Frontenac|Jean[-\s]?Baptiste\s+Colbert).+?)</li>\s*##gs' "$html" || true

          # 3) Sanity check
          echo "Remaining footnotes:"
          grep -n '<li id="fn' "$html" || true


      - name: Deploy PREVIEW to GitHub Pages (under /preview)
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: dist
          publish_branch: gh-pages
          destination_dir: preview
          keep_files: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
